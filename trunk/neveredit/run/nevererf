#!/usr/bin/env python
'''
a tar like command line util for erf files
Currently, -c is still unimplemented.
'''

import sys
import os,os.path
from optparse import OptionParser

def getNeverDir(path):
    while os.path.basename(path) != 'neveredit' and\
          os.path.basename(path) != 'bin' and\
          os.path.dirname(path) != path:
        path = os.path.dirname(path)
    if os.path.basename(path) == 'bin':
        path = os.path.join(os.path.dirname(path),'lib/python')
    elif os.path.basename(path) == 'neveredit':
        path = os.path.dirname(path)
    return path

if __name__ == "__main__":
    try:
        parser = OptionParser()
        parser.add_option('-d','--nwndir',type="string",dest="appDir",
                          help="NWN Application Dir",
                          default="/Applications/Neverwinter Nights/")
        parser.add_option('-f','--file',type='string',dest='file',
                          help='erf file name')
        parser.add_option('-t','--list',action='store_true',dest='list',
                          help='list the contents of the erf file')
        parser.add_option('-c','--create',action='store_true',dest='create',
                          help='create an erf file (currently unimplemented)')
        parser.add_option('-x','--extract',action='store_true',dest='extract',
                          help='extract files from the erf file')
        parser.add_option('-v','--verbose',action='store_true',dest='verbose',
                          help='verbose output')
        parser.add_option('--devel',action='store_true',dest='devel',
                          help='run in development mode (does not use installed version)')
        (options,args) = parser.parse_args()
        if options.devel:
            sys.path.insert(0,getNeverDir(os.getcwd()))
        try:
            from neveredit.file.ERFFile import ERFFile
            from neveredit.util import neverglobals
            from neveredit.game import ResourceManager
        except ImportError:            
            path = os.path.abspath(os.path.dirname(__file__))
            sys.path.append(getNeverDir(path))
            try:
                from neveredit.file.ERFFile import ERFFile
                from neveredit.util import neverglobals
                from neveredit.game import ResourceManager
            except ImportError:
                print sys.exc_info()[1]
                print sys.path
                print >>sys.stderr,'Faulty neveredit installation: could not import classes'
                sys.exit(1)

        if options.list and options.extract or options.list and options.create or\
           options.extract and options.create:
            print >>sys.stderr,'can only specify one of create (-c), extract (-x) or list (-t)'
            sys.exit(1)
        if not options.list and not options.extract and not options.create:
            print >>sys.stderr,'must specify one of create (-c), extract (-x) or list (-t)'
            sys.exit(1)
        if not options.file:
            print >>sys.stderr,'must specify an erf filename with -f'
            sys.exit(1)

        
        if options.extract:
            if not os.path.exists(options.file):
                print >>sys.stderr,"can't find erf file: " + options.file
                sys.exit(1)
            f = ERFFile()
            f.fromFile(options.file)
            if len(args) == 0:
                f.extractAllEntries()
            else:
                for resource in args:
                    if options.verbose:
                        print resource
                    try:
                        f.extractEntry(resource)
                    except:
                        print >>sys.stderr,'error extracting "' + resource + '" from erf file.'
        elif options.create:
            print >>sys.stderr,'erf file creation not yet implemented'
        elif options.list:
            if not os.path.exists(options.file):
                print >>sys.stderr,"can't find erf file: " + options.file
                sys.exit(1)
            f = ERFFile()
            f.fromFile(options.file)
            for key in f.getKeyList():
                print ResourceManager.ResourceManager.nameFromKey(key).lower()
    except KeyboardInterrupt:
        print >>sys.stderr,'\naborting...'
